1
00:00:00,000 --> 00:00:03,999
Initiating the "sol_launch.py" launch file for three robots and outputting to both stdout and the results.log file.

2
00:00:04,000 --> 00:00:06,999
The command initializes the environment with three robots and opens RViz for visualization.

3
00:00:07,000 --> 00:00:14,999
Currently, the robots are in the exploration phase, strategizing their approach to navigate while building an understanding of the environment in terms of costmaps.

4
00:00:15,000 --> 00:00:20,999
Each robot is now estimating the locations of items relative to the map, approaching towards these items while avoiding static obstacles.

5
00:00:21,000 --> 00:00:31,999
With Robots 2 and 3 in close proximity, and Robot 3 carrying a higher-value item, a central node commands Robot 1 to stop.

6
00:00:32,000 --> 00:00:37,999
Robot 2 proceeds, maintaining movement within a safe distance.

7
00:00:38,000 --> 00:00:44,999
Robot 3 heads back, using the costmap to navigate a path to home that avoids any items.

8
00:00:45,000 --> 00:00:52,999
It carefully avoids picking up any items, prioritizing higher value retrieval.

9
00:00:53,000 --> 00:01:03,999
Robot 2 enters a constraint state as it is too close to an obstacle for safe rotation without risking collision.

10
00:01:04,000 --> 00:01:11,999
Robot 2's path is carefully planned to avoid obstacles, items, and Robot 3, utilizing shared location data.

11
00:01:12,000 --> 00:01:20,999
Robot 1, nearing the home zone, is transporting a green ball.

12
00:01:21,000 --> 00:01:41,999
The robots approach their starting points, guided by the NAV2 stack and sensor data.

13
00:01:42,000 --> 00:01:58,999
Data logging in progress allows for real-time analysis of the system's performance.

14
00:01:59,000 --> 00:02:19,999
The robots prepare for another exploration phase. As they are influenced by inherent randomness rather than determinism, the goes towards different item this time.

15
00:02:20,000 --> 00:02:51,999
Robot 1 is going to swaps a green ball for one of higher value. Robot 2 was paused as Robot 1 approaches an item in close proximity.

16
00:02:52,000 --> 00:03:09,999
Robot 1 now targets the blue balls, aiming to collect the nearest one.

17
00:03:10,000 --> 00:03:22,999
Robot 2, upon finding a green ball, carefully maneuvers to collect it while avoiding obstacles by curving the path.

18
00:03:23,000 --> 00:03:45,999
After collection, robot 1 smartly planned a path that avoids the cluser of items.

19
00:03:46,000 --> 00:03:54,999
Discovering a higher-priority blue ball, Robot 2 adjusts its objective and proceeds to collect it.

20
00:03:55,000 --> 00:04:27,999
Robot 1 has planned the path to avoid the item but would not be able to as while doing so it risk the chance of collision by spin, thus the state manager will make sure this won't happen.

21
00:04:28,000 --> 00:04:39,999
Metrics from the simulation are dynamically updated and displayed.

22
00:04:40,000 --> 00:04:45,999
Metrics are visualized directly using a Python Notebook for detailed analysis.

23
00:04:46,000 --> 00:04:53,600
Graphs and heatmaps encapsulate the entire simulation and highlighting robot movements across the map.
